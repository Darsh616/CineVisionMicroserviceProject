services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: cine_vision
      PG_DATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - cinevision-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cine_vision"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    container_name: mongodb
    image: mongo
    ports:
      - "27017:27017"
    volumes:
      - data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootuser
      - MONGO_INITDB_ROOT_PASSWORD=rootpass
    networks:
      - cinevision-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "mongosh -u rootuser -p rootpass --authenticationDatabase admin --eval 'db.runCommand({ping:1})' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    ports:
      - "8091:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=rootuser
      - ME_CONFIG_MONGODB_ADMINPASSWORD=rootpass
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - cinevision-net

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    restart: unless-stopped
    networks:
      - cinevision-net

  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
    depends_on:
      - zookeeper
    restart: unless-stopped
    networks:
      - cinevision-net

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:18.0.2
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    ports:
      - "8181:8080"
    command:
      - start-dev
    restart: unless-stopped
    networks:
      - cinevision-net

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    restart: unless-stopped
    networks:
      - cinevision-net

  redis:
    container_name: redis
    image: redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - cinevision-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    environment:
      - spring.application.name=eureka-server
    networks:
      - cinevision-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      eureka-server:
        condition: service_healthy
      movie-service:
        condition: service_started
      user-service:
        condition: service_started
    environment:
      - spring.application.name=api-gateway
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka
    restart: unless-stopped
    networks:
      - cinevision-net

  movie-service:
    build:
      context: ./movieService
      dockerfile: Dockerfile
    ports:
    - "8082:8082"
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
       - spring.application.name=movie-service
       - spring.datasource.url=jdbc:postgresql://postgres:5432/cine_vision
       - spring.datasource.username=postgres
       - spring.datasource.password=12345
       - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - cinevision-net

  user-service:
    build:
      context: ./userService
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      eureka-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      - spring.application.name=userService
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka
      - spring.data.mongodb.uri=mongodb://rootuser:rootpass@mongodb:27017/cine_vision?authSource=admin
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/api/user/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
    - cinevision-net

  email-service:
    build:
      context: ./emailService
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - spring.application.name=emailService
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka
      - spring.kafka.consumer.bootstrap-servers=kafka:9092
    restart: unless-stopped
    networks:
      - cinevision-net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
     - REACT_APP_API_URL=http://localhost:8080   # tell React to use API Gateway
    # depends_on:
    #   api-gateway:
    #     condition: service_healthy
    stdin_open: true   # keep container alive for React dev server
    tty: true
    restart: unless-stopped
    networks:
    - cinevision-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5


networks:
  cinevision-net:
    driver: bridge

volumes:
  postgres:
  data:
